	name:BetweenTest
	in
4
	out
1
	stax
3 5 :b
	name:NotBetweenTest
	in
6
	out
0
	stax
3 5 :b
	name:ClampTest
	in
7
	out
5
	stax
3 5 :c
	name:AlreadyClampedTest
	in
4
	out
4
	stax
3 5 :c
	name:RepeatToLengthTest
	in
	out
1 2 3 1 2 3 1
	stax
3R 7 :m J
	name:IncreaseToMultipleTest
	in
	out
28
	stax
25 7 :m
	name:IntLiteral
	in
	out
123
	stax
123
	name:BigIntLiteral
	in
	out
999999999999999999999999999999999999999
	stax
999999999999999999999999999999999999999
	name:TenIsReallyOneZero
	in
	out
0
	stax
10
	name:FloatLiteral
	in
	out
1.23
	stax
1!23
	name:FloatNoTrailingZero
	in
	out
0
	stax
1!230
	name:FloatFloor
	in
	out
12
	stax
12!345 @
	name:Addition
	in
	out
5
	stax
2 3+
	name:AdditionOneValNoop
	in
	out
2
	stax
2 +
	name:Subtraction
	in
	out
-1
	stax
2 3-
	name:Multiplication
	in
	out
6
	stax
2 3*
	name:MulOneValNoop
	in
	out
2
	stax
2 *
	name:Division
	in
	out
4
	stax
14 3/
	out
∞
	stax
14 0/
	name:Modulus
	in
	out
3
	stax
11 4%
	in
11/4
	out
3/4
	stax
1%
	in
11.5
	out
1.5
	stax
2%
	in
-5.5 3.0
	out
0.5
	in
-5.5 -3.0
	out
0.5
	in
7 0
	out
7
	in
12/8 0
	out
3/2
	stax
%
	name:DivMod
	in
17 5
	out
3 2
	in
17/1 10/2
	out
3 2/1
	stax
|% \J
	name:Increment
	in
	out
8
	stax
7^
	name:Decrement
	in
	out
6
	stax
7v
	name:LeadingZero
	in
	out
0
	stax
04*
	name:NumberToString
	in
	out
34
	stax
3$4$+
	name:Halve
	in
13
	out
6
	in
3/7
	out
3/14
	stax
h
	name:Unhalve
	in
6
	out
12
	in
1/6
	out
1/3
	stax
H
	name:Negate
	in
	out
-4
	stax
4N
	name:Exponent
	in
3 4
	out
81
	in
3 -4
	out
1/81
	in
1.5 2
	out
2.25
	in
2/3 -2
	out
9/4
	in
3/2 2/1
	out
2.25
	stax
|*
	stax
#
	name:PowerOfTen
	in
3
	out
1000
	in
-2
	out
1/100
	stax
|A
	name:PowerOfTwo
	in
9
	out
512
	in
-5
	out
1/32
	stax
|2
	name:PowerOfMinusOne
	in
	out
-1
	stax
9 |1
	name:BaseConvert
	in
255
	out
ff
	stax
16 |b
	in
-14
	out
-112
	stax
3 |b
	name:BaseUnconvert
	in
ff
	out
255
	stax
16 |b
	in
"-112"
	out
-14
	stax
3 |b
	name:BaseUnconvertDigits
	in
	out
1234
	stax
4R A |b
	name:BaseExplodeDigits
	in
255
	out
8
	stax
2 |E |+
	in
-14
	out
112
	stax
3 |E $
	name:BinaryConvert
	in
	out
101
	stax
5 |B
	name:BinaryUnConvert
	in
	out
5
	stax
"101" |B
	name:HexConvert
	in
	out
ff
	stax
255 |H
	name:HexUnconvert
	in
	out
255
	stax
"ff" |H
	name:PrimeFactorize
	in
	out
2,2,3
	stax
12 |f ',*
	name:GCD
	in
	out
6
	stax
12 18 |g
	name:LCM
	in
	out
36
	stax
12 18 |l
	name:PrimeTest
	in
	out
1
	stax
97 |p
	name:IsEven
	in
	out
0
	stax
3 |e
	name:IncDecXTest
	in
	out
1232
	stax
|X|X|X|x Lr $
	in
[3, 4]
	out
1
	stax
|X
	in
	out
21
	stax
|Y|Ypp
	name:Minimum
	in
3 7
	out
3
	in
4
	out
4
	stax
|m
	stax
t
	name:Maximum
	in
3 7
	out
7
	in
4
	out
4
	stax
|M
	stax
T
	name:AbsoluteValue
	in
	out
5
	stax
5|a
	name:NegativeAbsoluteValue
	in
	out
5
	stax
5N|a
	name:FloatAbsoluteValue
	in
-1.23
	out
1.23
	stax
|a
	name:RationalAbsoluteValue
	in
3/4
	out
3/4
	stax
|a
	name:RepeatedDivide
	in
12 2
	out
3
	in
6 1
	out
6
	stax
|/
	name:UpsideDownInteger
	in
	out
1/5
	stax
5u
	name:Fraction
	in
	out
1/3
	stax
2 6 u*
	name:Numerator
	in
	out
1
	stax
2 6 u* r
	name:Denominator
	in
	out
3
	stax
2 6 u* R
	name:FracPart
	in
23/4
	out
3/4
	in
23.5
	out
0.5
	stax
D
	name:UpsideDownFraction
	in
	out
5/2
	stax
2 5u* u
	name:FractionListify
	in
	out
1 3
	stax
1 3u* l J
	name:FractionArithmetic
	in
	out
11/15
	stax
1 3u* 2 5u* +
	name:FractionPower
	in
	out
8/27
	stax
2 3u* 3 |*
	name:FractionFloor
	in
	out
2
	stax
7 3u* @
	name:ExplodeNumber
	in
147
	out
2 8 14
	in
-147
	out
2 8 14
	stax
E {Hm J
	name:Base36Encode
	in
	out
5yc1r
	stax
9999999 |3
	name:Base36Decode
	in
	out
9999999
	stax
"5yc1r" |3
	name:SquareRoot
	in
	out
1.4142135623731
	stax
2|Q
	name:NegativeSquareRoot
	in
-2
	out
1.4142135623731
	stax
|Q
	name:IntSquareRoot
	in
	out
13
	stax
170 |q
	name:IntNegativeSquareRoot
	in
-170
	out
13
	stax
|q
	name:Square
	in
	out
49
	stax
7J
	name:Factorial
	in
	out
120
	stax
5|F
	name:FloatFormatPlaces
	in
123.456789
	out
123.46
	stax
2 j
	in
123.0
	out
123.00
	stax
2 j
	name:BitwiseAnd
	in
	out
1
	stax
3 5I
	stax
3 5|&
	stax
1I
	stax
1|&
	name:BitwiseOr
	in
	out
7
	stax
3 5M
	stax
7M
	stax
3 5||
	stax
7||
	name:BitwiseXor
	in
	out
6
	stax
3 5S
	stax
6S
	stax
3 5|^
	stax
6|^
	name:ShiftLeft
	in
7 3
	out
56
	stax
	in
7 -1
	out
3
	stax
|<
	name:ShiftRight
	in
255 2
	out
63
	in
255 -1
	out
510
	stax
|>
	name:Equality
	in
	out
1
	stax
3 3=
	name:Inequality
	in
	out
0
	stax
3 4=
	name:LessThan
	in
	out
1
	stax
1 2<
	name:GreaterThan
	in
	out
0
	stax
1 2>
	name:GCD
	in
42 56
	out
14
	stax
|g
	name:NotTrue
	in
	out
0
	stax
7 !
	name:NotFalse
	in
	out
1
	stax
0 !
	name:If
	in
	out
not equal
	stax
1 2= "equal" "not equal" ?
	name:AbsoluteDifference
	in
5 9
	out
4
	in
5.0 9
	out
4
	in
5 9.0
	out
4
	in
9.0 5.0
	out
4
	in
5/1 9
	out
4/1
	in
5 9/1
	out
4/1
	in
5.0 9/1
	out
4
	in
5/1 9.0
	out
4
	stax
:-
	name:CeilingFraction
	in
7/2
	out
4
	stax
e
	name:CeilingFloat
	in
2.7
	out
3
	stax
e
	name:PrimeFactorizeWithExponents
	in
5040
	out
2 4
3 2
5 1
7 1
	stax
:f mJ
	name:DistinctPrimeFactors
	in
72
	out
2 3
	stax
:F J
	name:Log
	in
	out
1.77124374916142
	stax
7 3 |L
	in
0 7
	out
-∞
	stax
|L
	name:LogFloorShortcuts
	in
100
	out
6
	in
1
	out
0
	stax
:2
	in
100
	out
2
	in
7
	out
0
	stax
:A
	in
200
	out
374
	stax
|F:A
	in
200
	out
1245
	stax
|F:2
	name:CustomBase
	in
97
	out
babcb
	stax
"abc" :B
	name:Multiplicity
	in
10
	out
0
1
0
2
0
1
0
3
0
1
	stax
m2:/
	name:Cosine
	in
20
	out
   #
 #
#
 #
   #
    #
    #
  #
#
#
  #
    #
    #
  #
#
#
 #
   #
    #
   #
	stax
m|72*3!5+@'#)
	name:Sine
	in
20
	out
    #
    #
  #
#
#
 #
   #
    #
   #
 #
#
 #
   #
    #
   #
 #
#
#
  #
    #
	stax
m|82*3!5+@'#)
	name:Tangent
	in
20
	out
#
#
#
 #
 #
 #
  #
   #
    #
      #
          #
                            #
                                    #
           #
      #
    #
   #
  #
 #
 #
	stax
m8!/|92*|a^@'#)
	name:NextPrime
	in
1000
	out
1009
	in
1009
	out
1009
	stax
:P
	name:LastPrime
	in
1000
	out
997
	in
997
	out
991
	stax
:p
	name:InvertFloat
	in
2.5
	out
0.4
	stax
u
	name:NthPrime
	in
9
	out
29
	stax
|6
	name:BinaryDigits
	in
10
	out
2
	stax
:B|+
	name:Sign
	in
-123
	out
-1
	in
0
	out
0
	in
123
	out
1
	stax
:+
	name:FactorizationExponents
	in
20
194
	out
2 0 1
1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1
	stax
me|n J
	in
1000
	out
608
	stax
vF|n|M2<+
	name:Totient
	in
13
	out
12
	in
24
	out
8
	in
1
	out
1
	stax
:t
	name:AllDivisors
	in
-24
	out
1
2
3
4
6
8
12
24
	stax
:d m
	name:NthFibbonacci
	in
0
	out
1
	in
5
	out
8
	in
-1
	out
0
	in
-2
	out
1
	in
-3
	out
-1
	in
-4
	out
2
	stax
|5
	name:SquareTwo
	in
2 3
	out
4 9
	stax
:J s p| P
	name:Triangular
	in
10
	out
55
	stax
|+
	name:ProperizeFraction
	in
11/4
	out
2 3/4
	stax
B \J
	name:Round
	in
1.4 1.5 1.6 5/4 6/4 7/4
	out
1
2
2
1
2
2
	stax
Lr mj
	name:Choose
	in
10 8
	out
45
	in
10 9
	out
10
	in
10 10
	out
1
	in
10 11
	out
0
	stax
|C
	name:Floatify
	in
3/2
	out
1.5
	stax
:#
	name:FloatDiv
	in
6 5
	out
1.2
	stax
:_
	name:BinaryDecode
	in
[1 1 0 1]
	out
13
	stax
:b
	name:HighBit
	in
13
	out
8
	stax
:G
	name:LowBit
	in
13
	out
1
	stax
:g
	name:SetInteriorBits
	in
12
	out
15
	in
0
	out
0
	in
-2
	out
-1
	stax
:~
	name:Coprime
	in
12 14
	out
0
	in
12 35
	out
1
	stax
:!
	name:Catalan
	out
1 2 5 14 42 132 429 1430 4862 16796
	stax
A{:CmJ
	name:ExtractBit
	in
20 2
	out
1
	in
20 3
	out
0
	stax
:@
	name:SetBit
	in
20 1
	out
22
	in
20 [1 2 3]
	out
30
	stax
:]
	name:UnsetBit
	in
20 2
	out
16
	in
22 [1 2 3]
	out
16
	stax
:[
	name:ToggleBit
	in
20 2
	out
16
	in
20 1
	out
22
	in
20 [1 2 3]
	out
26
	stax
::
	name:Cmp
	in
1 2
	out
-1
	in
"abc" "abcd"
	out
-1
	in
2 2
	out
0
	in
"foo" "foo"
	out
0
	in
3 2
	out
1
	in
"goo" "foo"
	out
1
	stax
|$
	name:FixedBinary
	in
11 6
	out
001011
	stax
:a
	name:FixedHex
	in
258 4
	out
0102
	stax
:h
	name:Rationalize
	in
34.245
	out
6849/200
	in
0
	out
0/1
	stax
|j
	name:CrammedSingleInt
	out
93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000
	stax
"#)<9VhUW<,I=I{o-I-?jz,:<s,|Txy8rr<eO2J)0nfC6P&lMgQMS<<,[yNP@f<m#J,.oNZ2C 2y%u:}}~"%
	name:NthRoot
	in
32 5
31 5
1 100
-100 2
99999999999999999999 4
0 37
	out
2
1
1
10
99999
0
	stax
me|N
	name:IsNthPower
	in
-8 3
8 3
-25 2
100 2
0 3
16 4
17 4
	out
1
1
0
1
1
1
0
	stax
me:N
	name:FloatBinary
	in
0.0
1e-100
1e-1
1e0
1e100
	out
0000000000000000000000000000000000000000000000000000000000000000
0010101100101011111111110010111011100100100011100000010100110000
0011111110111001100110011001100110011001100110011001100110011010
0011111111110000000000000000000000000000000000000000000000000000
0101010010110010010010011010110100100101100101001100001101111101
	stax
meB$
	name:NPartFactorizations
	in
12 3
	out
1 1 12
1 2 6
1 3 4
1 4 3
1 6 2
1 12 1
2 1 6
2 2 3
2 3 2
2 6 1
3 1 4
3 2 2
3 4 1
4 1 3
4 3 1
6 1 2
6 2 1
12 1 1
	stax
:n mJ