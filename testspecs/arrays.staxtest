	name:SingleUniqueElement
	in
[3 3 3]
	out
1
	in
[3 3 3 4]
	out
0
	stax
:u
	name:Flatten
	in
[[1 2] [3 4]]
	out
1 2 3 4
	stax
:f J
	in
[3 4 5 [6]] [3 4 [5 [6]]]
	out
1
	stax
:f =
	name:GetIndexOfAll
	in
hello
	out
1 4
	stax
"eo" :I J
	name:AllLeftRotations
	in
ABC
	out
ABC BCA CAB
	stax
:( J
	name:AllRightRotations
	in
ABC
	out
ABC CAB BCA
	stax
:) J
	name:ZipShort
	in
"abcd" "xyz"
	out
ax by cz
	stax
|\J
	name:ZipEnd
	in
"abcd" "xyz"
	out
bx cy dz
	stax
:,J
	name:ZeroRange
	in
	out
0,1,2,3,4
	stax
5r',*
	name:OneRange
	in
	out
1,2,3,4,5
	stax
5R',*
	name:StartEndRange
	in
	out
5 6 7
	stax
5 8 |r J
	name:StartEndStrideRange
	in
	out
5 7 9 11
	stax
5 13 2 |R J
	name:ReverseArray
	in
	out
5,4,3,2,1
	stax
5R r ',*
	name:ConcatArray
	in
	out
1,2,3,1,2,3,4
	stax
3R 4R + ',*
	name:ConcatArrayElement
	in
	out
1,2,3,7
	stax
3R 7 + ',*
	name:RepeatArray
	in
	out
1,2,3,1,2,3
	stax
3R 2* ',*
	name:RepeatArrayBackwards
	in
	out
3,2,1,3,2,1
	stax
3R 2N* ',*
	name:Explode
	in
	out
9
	stax
5R E +
	name:StringArrayEquivalence
	in
	out
97,98,99
	stax
"abc" ',*
	name:ArrayLength
	in
	out
5
	stax
5R%
	name:ReadIndex
	in
	out
3
	stax
5R 2@
	in
[[1 2 3] [4 5 6] [7 8 9]]
	out
8
	stax
2 1@
	name:ReadIndexes
	in
	out
3,5
	stax
5R 2]1N]+ @ ',*
	name:AssignIndex
	in
	out
1,8,3,4,5
	stax
5R 1 8& ',*
	name:AssignIndexMutate
	in
[1 2 3 4 5]
	out
1 2 3 -4 5
	stax
3{N}&J
	name:AssignIndexMutateRegisters
	in
[11 22 33 44]
	out
i 2
_ 33
11 22 66 44
	stax
2 {.i piP._ p_P H}& JP
	name:AssignIndexAll
	in
	out
1,8,8,4,5
	stax
5R 1 2\ 8& ',*
	name:AssignIndexOOB
	in
	out
1 2 3 0 0 0 77
	stax
3R 6 77& J
	name:AssignIndexNegative
	in
	out
1 2 3 77 5
	stax
5R 2N 77& J
	name:AssignIndexNegativeOOB
	in
	out
77 0 0 1 2 3
	stax
3R 6N 77& J
	name:ArrayToString
	out
12345
	stax
5R$
	name:ToString
	out
-1
	stax
U]] $h
	name:SingletonWrap
	in
	out
1
	stax
0]%
	name:PairWrap
	in
	out
2
	stax
3 7 \%
	name:Head
	in
	out
1
	stax
5R h
	name:Tail
	in
	out
5
	stax
5R H
	name:Sum
	in
	out
15
	stax
5R |+
	in
	out
155
	stax
20RAt|+
	name:MinimumArray
	in
	out
1
	stax
5R oh
	name:MaximumArray
	in
	out
5
	stax
5R oH
	name:Delta
	in
[1 1 3 8]
	out
0 2 5
	stax
:- J
	name:JoinWithNewlines
	in
abcd
	out
dc
ba
	stax
2/ |J r
	name:SplitOnNewlines
	in
"ab\ncd"
	out
ab cd
	stax
|j J
	name:Palindromize
	in
	out
abcbcba
	stax
"abcb" |p
	name:ZipRep
	in
	out
ax,by,cx,dy,ex
	stax
"abcde" "xy" \ ',*
	name:Union
	in
[1 2 2 3 3] [0 1 2]
	out
1,2,2
	stax
|& ',*
	name:SymmetricDiff
	in
[1 2 2 3 3] [0 1 2]
	out
3,3,0
	stax
|^ ',*
	name:CountInTest
	in
[1 2 2 3 3] 3
	out
2
	in
3 [1 2 2 3 3]
	out
2
	stax
#
	name:IndexAllArray
	in
[1 2 3 2 1 2 3]
	out
2 6
	stax
3|I J
	name:Uncons
	in
	out
97bcd
	stax
"abcd" B pP
	name:UnconsRight
	in
	out
100abc
	stax
"abcd" N pP
	name:ElementRepeat
	out
111122223333
	stax
3R4|*$
3R4N|*$
	name:CrossProduct
	in
	out
ax ay az bx by bz cx cy cz
	stax
"abc" "xyz" |* J
	name:SurroundWith
	in
	out
bab
	stax
'a'b |S
	name:GetEveryNth
	in
[1, 2, 3, 4, 5, 6]
	out
1 3 5
	stax
2:: J
	name:Any
	in
[0 0 0 2 0]
	out
1
	stax
|a
	name:All
	in
[0 0 0 2 0]
	out
0
	stax
|A
	name:Mirror
	in
[3 1 7]
	out
3 1 7 7 1 3
	stax
:m J
	name:Squarify
	in
Hello, world!
	out
Hell
o, w
orld
!   
	stax
:J m
	name:Array Product
	in
[4 7 5]
	out
140
	stax
:*
	name:RunLength
	in
[7 7 4 9 9 9]
	out
7 2
4 1
9 3
	stax
|RmJ
	name:IsSuperset
	in
[1 2 3 4 5] [2 4]
	out
1
	stax
:S
	in
[1 2 3 4 5] [2 4 6]
	out
0
	stax
:S
	name:MultisetSubtract
	in
[1 2 2 3 4 5] [2 4 4]
	out
1 2 3 5
	stax
|- J
	name:SingleRemoval
	in
[1 2 2 3 3 4 5] 3
	out
1 2 2 3 4 5
	stax
|- J
	name:RemoveIndex
	in
[2 4 6 8 10]
	out
2 4 6 10
	stax
3 |@ J
	in
[2 4 6 8 10]
	out
2 4 8 10
	stax
3N |@ J
	name:InsertAt
	in
[2 4 6 8 10]
	out
2 4 6 99 8 10
	stax
3 99 |@ J
	name:TruthyIndices
	in
[0 0 0 23 0 0 76 0]
	out
3 6
	stax
:1 J
	name:FalsyIndices
	in
[0 0 0 23 0 0 76 0]
	out
0 1 2 4 5 7
	stax
:0 J
	name:FirstTruthyIndex
	in
[0 0 0 23 0 0 76 0]
	out
3
	stax
|1
	name:FirstFalsyIndex
	in
[9 8 4 4 3 6 0 2 3 4]
	out
6
	stax
|0
	name:CenteredRange
	in
3
	out
-3 -2 -1 0 1 2 3
	stax
:r J
	in
-4
	out
-4 -3 -2 -1 0 1 2 3 4
	stax
:r J
	name:SplitAt
	in
abcdefg
	out
cdefg
ab
	stax
2 :/ PP
2s :/ PP
2 % PP
	in
	out
-ab
-ab
a-b
-ab
a-b
ab-
ab-
	stax
3:rF.abs:/sp'-pP
	name:Powerset
	in
ABC
	out
A
AB
ABC
AC
B
BC
C
	stax
S m
	name:Choose
	in
ABC
	out
AB
AC
BC
	stax
2S m
	name:NonDescending
	in
[1]
	out
1
	in
[1 3 2]
	out
0
	in
[1 34 67 88]
	out
1
	stax
:^
	name:NonAscending
	in
[1]
	out
1
	in
[1 3 2]
	out
0
	in
[99 54 32 12]
	out
1
	stax
:v
	name:Mode
	in
[1 2 2 3 3 4]
	out
3
	in
[1,2,3,3,3,1,2,1,2,1]
	out
1
	in
[7, 6, 6, 7]
	out
6
	in
["a","a","b"]
	out
a
	stax
:M
	name:FalsyIndices
	in
[1 2 0 3 3 4 0]
	out
2 6
	stax
:F J
	name:TruthyIndices
	in
[1 2 0 3 3 4 0]
	out
0 1 3 4 5
	stax
:T J
	name:VerbatimCount
	in
bcd
	out
1
	in
a
	out
0
	stax
Va 3B , |#
	name:EmptyRectangularize
	in
[[1 2] [3]]
	out

	stax
|Z HH
	name:Coalesce
	in
[0 0 3 4 0 0]
	out
3
	stax
:c
	name:AllPermutations
	in
abbc
	out
abbc
abcb
abbc
abcb
acbb
acbb
babc
bacb
bbac
bbca
bcab
bcba
babc
bacb
bbac
bbca
bcab
bcba
cabb
cabb
cbab
cbba
cbab
cbba
	stax
|T m
	name:NPermutations
	in
abbc
	out
ab
ab
ac
ba
bb
bc
ba
bb
bc
ca
cb
cb
	stax
2 |T m
	name:ExtremaIndices
	in
asdfasdfasdf asdf asdf asasdfasdf
	out
12
17
22
	stax
:a m
	in
asdfasdfasdf asdf asdf asasdfasdf
	out
1
5
9
14
19
24
26
30
	stax
:A m
	name:Span
	in
[8 4 5 7 9 4 5 6]
	out
5
	stax
:s
	name:CartesianSelfJoin
	in
ab
	out
aaa
aab
aba
abb
baa
bab
bba
bbb
	stax
3 |^ m
	name:MultisetIntersection
	in
[1 2 3 4 1 2 3 4] [2 3 3 4 4 4]
	out
2 3 4 3 4
	stax
|b J
	name:MultisetUnion
	in
[1 2 3 4 1 2 3 4] [2 3 3 4 4 4]
	out
1 2 3 4 1 2 3 4 4
	stax
|L J
	name:MultisetXor
	in
[1 2 3 4 1 2 3 4] [2 3 3 4 4 4]
	out
1 1 2 4
	stax
|n J
	name:Median
	in
[1 2 3 4 1 2 3 4]
	out
5/2
	stax
:d
	name:OrderedIndices
	in
occurring
	out
5 0 1 8 6 7 3 4 2
	stax
|o J
	name:Mean
	in
[2 3 4 5]
	out
7/2
	stax
:V
	name:run-lengths
	in
[7 7 4 9 9 9]
	out
2 1 3
	stax
:G J
	name:run-elements
	in
[7 7 4 9 9 9 7 7]
	out
7 4 9 7
	stax
:g J
	name:NextPerm
	in
abccd
	out
abcdc
abdcc
acbcd
acbdc
	stax
{|NQ} 4*
	name:MultiDimensionalAssignIndex
	in
abc
def
hij
	out
abc
def X
hij
	stax
L 1 4 'X & m
	in
abc
def
hij
	out
Xbc
dXf
hiX
	stax
L 3rc\ 'X & m
	name:Partitions
	in
5 3
	out
1 1 3
1 2 2
1 3 1
2 1 2
2 2 1
3 1 1
	in
"abcde" 3
	out
a b cde
a bc de
a bcd e
ab c de
ab cd e
abc d e
	stax
|! mJ
	name:AllPartitions
	in
abcd
	out
abcd
a bcd
ab cd
abc d
a b cd
a bc d
ab c d
a b c d
	stax
:! mJ
	name:Embed
	in
hello, world!
	out
helfoobarrld!
	stax
3 "foobar" |%
	in
hello, world!
	out
hello, world!  foobar
	stax
15 "foobar" |%
	in
hello, world!
	out
foobaro, world!
	stax
15N "foobar" |%
	name:ZipFill
	in
"abc" "123456"
	out
a1
b2
c3
 4
 5
 6
	stax
0 |\ m
	name:DropFirst
	in
[9 3 5 7]
	out
3 5 7
	stax
D J
	name:ColumnAlign
	out
1 1  1  1  
2 4  8  16 
3 9  27 81 
4 16 64 256
	stax
4c{|*K:<mJ
	out
1  1  1   1
2  4  8  16
3  9 27  81
4 16 64 256
	stax
4c{|*K:>mJ
	name:Collect
	in
[4 3 2 1]
	out
4 12 24 24
	stax
{*}C J
	name:PrefixSums
	in
[4 3 2 1]
	out
4 7 9 10
	stax
:+ J
	name:TruthyCount
	in
[4 3 0 2 1]
	out
4
	stax
:@
	name:MultiMode
	in
[1 1 2 3 3 4]
	out
1 3
	stax
|= J
	name:MultiAntiMode
	in
[1 1 2 3 4]
	out
2 3 4
	stax
|! J
	name:MinBy
	in
public static void main
	out
void main
	stax
j {%}e J
	name:MaxBy
	in
public static void main
	out
public static
	stax
j {%}E J
	name:Overlay
	in
[1 2 3 -1] [4 0]
	out
4 2 3 -1
	stax
:o J
	name:GroupBy
	in
	out
1 4 9 16
25 36
49
64
81
100
	stax
AR{Jm {20/}/ mJ
	name:PartitionWhen
	in
Hello, world!
	out
H
ell
o, w
orld!
	stax
{Vvs#}(m
	name:SelfCrossProduct
	in
[1 2 3]
	out
1 1
1 2
1 3
2 1
2 2
2 3
3 1
3 2
3 3
	stax
:2 mJ
	name:Diagonal
	in
["foo" "h" "bar"]
	out
f r
	stax
|2
	name:DifferenceIndices
	in
"hello" "hilkoz"
	out
1 3
	stax
:\J
	name:EqualElementIndices
	in
"hello" "hilkoz"
	out
0 2 4
	stax
:=J
	name:Chunkify
	in
foobarz
	out
fo ob a r z
	stax
5 M J
	name:ColumnAlign
	in
There is no historic reason whatsoever.
This kind of deviance has been around since year dot.
Folk do this when they are feeling very, very naughty.
	out
There is   no   historic reason whatsoever.                            
This  kind of   deviance has    been        around  since year dot.    
Folk  do   this when     they   are         feeling very, very naughty.
	stax
L{jm :| mJ
	name:RoundRobinFlatten
	in
[[1 2 3 4] [5] [6 7]]
	out
1 5 6 2 7 3 4
	stax
|G J
	name:DivisorReduceArray
	in
[1 2 3 4]
[]
[2 4 6]
[0]
[-2 0]
[2]
	out
1 2 3 4

1 2 3
0
-1 0
1
	stax
me :_ J
	name:IsArray
	in
[1 2 3]
	out
1
	in
987
	out
0
	stax
|4
	name:ArrayMinimum
	in
[2,1,3]
	out
1
	in
[]
	out
∞
	stax
|m
	in
8 [2,1,3]
	out
8 1
	stax
\ |m J
	name:ArrayMaximum
	in
[2,1,3]
	out
3
	in
[]
	out
-∞
	stax
|M
	in
8 [2,1,3]
	out
8 3
	stax
\ |M J
	name:CrammedArrays
	out
1 3 2 4 100
1000 1002
	stax
"%-)1*1"!JP "wf*"!JP
	out
-1809
	stax
"$q?"!h
	name:RepeatElementByArray
	in
abcdef
	out
bcceff
	stax
3r :B
	name:MatrixMultiplication
	out
11 14 17 20
23 30 37 44
35 46 57 68
47 62 77 92
	stax
8R2/ 8R4/ * mJ
	name:TruncateToShortest
	in
salutations
world
	out
salut
world
	stax
L :P m
	in
salutations
world
	out
tions
world
	stax
L :p m
	name:PopAt
	in
"abc" 4
	out
98
ac
	stax
:@PP
	name:ArrayEnds
	in
asdf
as
a
	out
af
as
aa
	stax
m:E
	name:CartesianPower
	in
"abc" 3
	out
aaa aab aac aba abb abc aca acb acc baa bab bac bba bbb bbc bca bcb bcc caa cab cac cba cbb cbc cca ccb ccc
	stax
:$ J
	in
[1, 2] 3
	out
3
	stax
:$ h %
	name:EmptyCartesianPower
	out
1
	stax
"abc" 0 :$ %
	name:CartesianProduct
	in
["ab" "xyz" "."]
	out
ax. ay. az. bx. by. bz.
	stax
:$ J
	in
["a" "b" "c"]
	out
97 98 99
	stax
:$ h J
	name:EmptyCartesianProduct
	out
1
	stax
z :$ %
	name:SetwiseEqual
	in
[3,4,3] [3,4]
	out
1
	in
[3,4,3,5] [3,4]
	out
0
	in
[3,4,3] [3,4,5]
	out
0
	stax
|{
	name:MultisetEqual
	in
[3,4,3] [3,4]
	out
0
	in
[3,4,3] [3,3,4]
	out
1
	in
[3,4,3] [3,3,4,4]
	out
0
	stax
|}
	name:Interleave
	in
[[1,2],[],[3],[4,5,6]]
	out
1 3 4 2 5 6
	stax
:iJ
	name:Columns
	in
qw

a
zxcv
	out
qaz wx c v
	stax
L:CJ
	name:ChoiceFrom
	out
(.8?PX\nw 
	stax
Vp:J{|'m